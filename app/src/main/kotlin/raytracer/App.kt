/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package raytracer

import me.tongfei.progressbar.ProgressBar
import java.io.File

fun hitSphere(center: Point3d, radius: Double, ray: Ray): Boolean {
    val oc = ray.origin - center
    val a = ray.direction.l2norm()
    val b = 2.0 * oc.dot(ray.direction)
    val c = oc.l2norm() - radius * radius
    val discriminant = b * b - 4 * a * c
    return discriminant > 0
}

fun rayColor(ray: Ray): Color {
    if (hitSphere(Point3d(0.0, 0.0, -1.0), 0.5, ray)) {
        return Color(1.0, 0.0, 0.0)
    }
    val unitDirection = ray.direction.unit()
    val t = 0.5 * (unitDirection.y + 1.0)
    return Color(1.0, 1.0, 1.0) * (1.0 - t) + Color(0.5, 0.7, 1.0) * t
}

fun main() {
    val aspectRatio = 16.0 / 9.0
    val imageWidth = 400
    val imageHeight = (imageWidth / aspectRatio).toInt()

    // Camera
    val viewportHeight = 2.0
    val viewportWidth = aspectRatio * viewportHeight
    val focalLength = 1.0

    val origin = Point3d(0.0, 0.0, 0.0)
    val horizontal = Vec3d(viewportWidth, 0.0, 0.0)
    val vertical = Vec3d(0.0, viewportHeight, 0.0)
    val lowerLeftCorner = origin - horizontal / 2.0 - vertical / 2.0 - Vec3d(0.0, 0.0, focalLength)

    // Render

    File("image.ppm").printWriter().use { out ->
        out.print("P3\n$imageWidth $imageHeight\n255\n")

        ProgressBar("Scanlines", imageHeight.toLong()).use { bar ->
            for (j in (imageHeight - 1) downTo 0) {
                bar.step()
                for (i in 0 until imageWidth) {
                    val u = i.toDouble() / (imageWidth - 1)
                    val v = j.toDouble() / (imageHeight - 1)
                    val r = Ray(origin, lowerLeftCorner + horizontal * u + vertical * v - origin)
                    val pixelColor = rayColor(r)
                    out.println(pixelColor.translatedString())
                }
            }
        }
    }
}
